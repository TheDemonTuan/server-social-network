// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid()) @db.VarChar(36)
  first_name    String   @db.VarChar(30)
  last_name     String   @db.VarChar(30)
  username      String   @unique @default(cuid()) @db.VarChar(25)
  avatar        String   @default("") @db.VarChar(255)
  cover         String   @default("") @db.VarChar(255)
  bio           String   @default("") @db.Text()
  email         String   @unique @db.VarChar(50)
  password      String   @db.VarChar(255)
  gender        Int      @db.TinyInt()
  phone         String   @unique @db.VarChar(15)
  date_of_birth DateTime @db.DateTime(6)
  created_at    DateTime @default(now()) @db.DateTime(6)
  updated_at    DateTime @updatedAt @db.DateTime(6)

  posts         Post[]
  post_likes    PostLike[]
  post_comments PostComment[]
  from_user_id  Friend[]      @relation("from_user_id")
  to_user_id    Friend[]      @relation("to_user_id")
  from_user     Chat[]        @relation("from_user")
  to_user       Chat[]        @relation("to_user")

  @@map("users")
}

model Post {
  id         Int      @id @default(autoincrement())
  user_id    String   @db.VarChar(36)
  content    String   @db.Text()
  status     Int      @default(1) @db.TinyInt()
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @updatedAt @db.DateTime(6)

  post_likes    PostLike[]
  post_comments PostComment[]

  user User @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("posts")
}

model PostLike {
  post_id    Int      @db.Int()
  user_id    String   @db.VarChar(36)
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @updatedAt @db.DateTime(6)

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])

  @@id([post_id, user_id])
  @@map("post_likes")
}

model PostComment {
  id         Int      @id @default(autoincrement())
  post_id    Int      @db.Int()
  user_id    String   @db.VarChar(36)
  content    String   @db.Text()
  video      String   @default("") @db.VarChar(255)
  photo      String   @default("") @db.VarChar(255)
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @updatedAt @db.DateTime(6)

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])

  @@index([post_id])
  @@map("post_comments")
}

enum FriendStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Friend {
  from_user_id String       @db.VarChar(36)
  to_user_id   String       @db.VarChar(36)
  status       FriendStatus @default(PENDING)
  created_at   DateTime     @default(now()) @db.DateTime(6)
  updated_at   DateTime     @updatedAt @db.DateTime(6)

  userid_1 User @relation(fields: [from_user_id], references: [id], name: "from_user_id")
  userid_2 User @relation(fields: [to_user_id], references: [id], "to_user_id")

  @@id([from_user_id, to_user_id])
  @@map("friends")
}

model Chat {
  id           Int      @id @default(autoincrement())
  from_user_id String   @db.VarChar(36)
  to_user_id   String   @db.VarChar(36)
  content      String   @db.Text()
  created_at   DateTime @default(now()) @db.DateTime(6)
  updated_at   DateTime @updatedAt @db.DateTime(6)

  from_user User @relation(fields: [from_user_id], references: [id], name: "from_user")
  to_user   User @relation(fields: [to_user_id], references: [id], name: "to_user")

  @@index([from_user_id, to_user_id])
  @@map("chats")
}
